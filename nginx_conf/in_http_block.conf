upstream vn_upstream{
    server 127.0.0.1;
    balancer_by_lua_file /mnt/c/Users/libojun/xuh/opt/verynginx/verynginx/lua_script/on_banlance.lua;
	keepalive 1024; #Connection pool
}

lua_package_path '/mnt/c/Users/libojun/xuh/opt/verynginx/verynginx/lua_script/?.lua;;/mnt/c/Users/libojun/xuh/opt/verynginx/verynginx/lua_script/module/?.lua;;';
lua_package_cpath '/mnt/c/Users/libojun/xuh/opt/verynginx/verynginx/lua_script/?.so;;';   
lua_code_cache on;

lua_shared_dict status 1m;
lua_shared_dict frequency_limit 10m;
lua_shared_dict summary_long 10m;
lua_shared_dict summary_short 10m;

init_by_lua_file /mnt/c/Users/libojun/xuh/opt/verynginx/verynginx/lua_script/on_init.lua;
rewrite_by_lua_file  /mnt/c/Users/libojun/xuh/opt/verynginx/verynginx/lua_script/on_rewrite.lua;
access_by_lua_file  /mnt/c/Users/libojun/xuh/opt/verynginx/verynginx/lua_script/on_access.lua;
log_by_lua_file  /mnt/c/Users/libojun/xuh/opt/verynginx/verynginx/lua_script/on_log.lua;
	

init_worker_by_lua_block {
    -- 只在主进程中运行定时任务
    if ngx.worker.id() == 0 then
        ngx.log(ngx.INFO, "Starting timer in master process, worker id: ", ngx.worker.id())
        
        -- 重新加载模块
        local VeryNginxConfig = require "VeryNginxConfig"
        local keepalive = require "keepalive"
        local json  = require "json"
        ngx.log(ngx.INFO, "VeryNginxConfig keepalive_enable: ", VeryNginxConfig.configs.keepalive_enable)
        -- 创建定时器函数
        local function create_timer()
            -- 检查进程是否正在退出
            if ngx.worker.exiting() then
                return
            end
            
            local ok, err = ngx.timer.at(10, function()
                -- 检查进程是否正在退出
                if ngx.worker.exiting() then
                    return
                end
                
                -- 执行 keepalive 检查
                if VeryNginxConfig.configs.keepalive_enable then
                    local rules = VeryNginxConfig.configs.keepalive_rule
                    ngx.log(ngx.INFO, "Keepalive rules: ", json.encode(rules))
                    if rules then
                        for _, rule in ipairs(rules) do
                            if rule.enable then
                                ngx.thread.spawn(function()
                                     keepalive.check_node(rule)
                                end)
                            end
                        end
                    end
                    -- 检查完所有节点后，生成 upstream.conf
                    local ok, err = keepalive.generate_upstream_conf(true)
                    if not ok then
                        ngx.log(ngx.ERR, "Failed to generate upstream.conf: ", err)
                    end
                end
                
                ngx.log(ngx.INFO, "Timer executed at: ", ngx.time())
                create_timer()  -- 重新创建定时器
            end)
            if not ok then
                ngx.log(ngx.ERR, "Failed to create timer: ", err)
            else
                ngx.log(ngx.INFO, "Timer created successfully")
            end
        end
        
        -- 立即创建第一个定时器
        create_timer()
    else
        ngx.log(ngx.INFO, "Worker process started, worker id: ", ngx.worker.id())
    end
}


include  /mnt/c/Users/libojun/xuh/opt/verynginx/verynginx/nginx_conf/upstream.conf;  # 添加 upstream 配置
