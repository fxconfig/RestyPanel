# RestyPanel 管理界面配置文件
# 提供完整的nginx配置管理和监控功能

# Lua 配置
lua_package_path '/app/lua/?.lua;;/app/lua/module/?.lua;;';
lua_package_cpath '/app/lua/?.so;;';

# 共享内存配置
lua_shared_dict status 1m;              # 状态
lua_shared_dict frequency_limit 10m;    # 频率限制
lua_shared_dict summary_long 10m;       # 发送汇总
lua_shared_dict summary_short 10m;      # 接收汇总
lua_shared_dict dashboard_cache 5m;     # 仪表盘缓存
lua_shared_dict jwt_tokens 5m;          # JWT token白名单管理
lua_shared_dict healthcheck 1m;          # 健康检查

# 先引入upstream配置
include /app/configs/upstream.conf;


# ---------- 统一 API 判定变量 ----------
map $uri $is_api {
    ~*/api/ 1;      # 只要URI中包含 /api/ 即视为API请求
    default    0;
}

# Lua 处理阶段（仅为非静态资源和非API请求）
init_by_lua_file /app/lua/on_init.lua;
init_worker_by_lua_file /app/lua/on_worker_init.lua;
rewrite_by_lua_file /app/lua/on_rewrite.lua;
access_by_lua_file /app/lua/on_access.lua;
log_by_lua_file /app/lua/on_log.lua;

include /app/configs/server_*.conf;

# 管理界面服务器
server {
    include /usr/local/openresty/nginx/conf/mime.types;
    listen 8765;
    server_name _;
    root /app/web;
    index index.html;
    
    # 默认留空，仅 API 请求时临时赋值
    set $vn_exec_flag '';

    # 访问日志
    access_log /var/log/nginx/manager_access.log main;
    error_log /var/log/nginx/manager_error.log;

    # 安全头部
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # WebSocket 代理处理 (原生 Nginx 方式)
    # 带前缀路径 - 通过前缀访问
    location ~ ^/asd1239axasd/ws/goaccess/(\d+)$ {
        proxy_pass http://127.0.0.1:$1;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # 直接处理带前缀的reports请求 - 关键修复
    location ^~ /asd1239axasd/reports/ {
        alias /app/web/reports/;
        add_header Cache-Control "no-cache";
        expires 0;
        try_files $uri =404;
    }

    location / {
        # 1) 若是 API 请求，设置标志并进入旧的 API 处理逻辑（内部跳转）
        if ($is_api) {
            set $vn_exec_flag 'api_mode';
            # 内部转向旧 API 位置，复用 Lua 入口实现
            rewrite ^ /asd1239axasd$uri last;
        }

        # 2) 非 API ⇒ 静态资源 / SPA
        try_files $uri $uri/ /index.html;

        # 基础缓存策略（静态文件更长，index.html 较短）
        expires 30s;
        add_header Cache-Control "public";
    }

    location = /metrics {
        access_log off;
        content_by_lua_block {
            local stats = ngx.shared.dashboard_cache
            local metrics = {}

            if stats then
                -- Prometheus格式监控指标
                table.insert(metrics, '# HELP nginx_requests_total Total number of requests')
                table.insert(metrics, '# TYPE nginx_response_status_total counter')
                table.insert(metrics, 'nginx_response_status_total{status="200"} ' .. (stats:get("status:200") or 0))
                table.insert(metrics, 'nginx_response_status_total{status="500"} ' .. (stats:get("status:500") or 0))
                
                table.insert(metrics, '# HELP nginx_memory_usage_bytes Memory usage in bytes')
                table.insert(metrics, '# TYPE nginx_memory_usage_bytes gauge')
                table.insert(metrics, 'nginx_memory_usage_bytes ' .. (collectgarbage("count") * 1024))
            else
                table.insert(metrics, '# No metrics available')
            end

            ngx.header.content_type = "text/plain"
            ngx.say(table.concat(metrics, "\n"))
        }
    }

    # ------------- API 处理（简化版） -------------
    location ~ ^/asd1239axasd/api(/.*)?$ {
        # 标识 API 请求，跳过 on_access/on_rewrite 中的通用流程
        set $vn_exec_flag 'api_mode';

        content_by_lua_block {
            -- 去掉前缀，得到真正 API path
            local prefix = "/asd1239axasd/api"
            local path = ngx.var.uri:sub(#prefix + 1)
            if path == "" then path = "/" end
            ngx.ctx.route_path = path

            local api_entry = require "api_entry"
            api_entry.handle()
        }
    }
} 
